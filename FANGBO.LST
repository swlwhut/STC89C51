C51 COMPILER V9.01   FANGBO                                                                01/01/2020 17:32:47 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE FANGBO
OBJECT MODULE PLACED IN FANGBO.OBJ
COMPILER INVOKED BY: G:\keil4\keil 4 for C51\keil 开发软件\keil 4\C51\BIN\C51.EXE FANGBO.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          
   2          #include <reg52.h>
   3          
   4          sbit PWMOUT = P2^1;
   5          
   6          sbit LED1 = P2^3;
   7          
   8          sbit LED2 =     P2^2;
   9          
  10          sbit LED3 =     P2^1;
  11          
  12          sbit LED4 =     P2^0;
  13          
  14          sbit KEY1 = P3^2;
  15          
  16          sbit KEY2 = P3^3;
  17          
  18          sbit KEY3 = P3^0;
  19          
  20          sbit KEY4 = P3^1;
  21          
  22           
  23          
  24          unsigned char HighRH = 0;  //高电平重载值的高字节
  25          
  26          unsigned char HighRL = 0;  //高电平重载值的低字节
  27          
  28          unsigned char LowRH  = 0;  //低电平重载值的高字节
  29          
  30          unsigned char LowRL  = 0;  //低电平重载值的低字节
  31          
  32           
  33          
  34          void ConfigPWM(unsigned int fr, unsigned char dc);
  35          
  36          void ClosePWM();
  37          
  38          void delay();
  39          
  40           
  41          
  42          void main()
  43          
  44          {
  45   1      
  46   1          unsigned int i;
  47   1      
  48   1              bit backup1 = 1;
  49   1      
  50   1              bit backup2 = 1;
  51   1      
  52   1              bit backup3 = 1;
  53   1      
  54   1              bit backup4 = 1;
  55   1      
C51 COMPILER V9.01   FANGBO                                                                01/01/2020 17:32:47 PAGE 2   

  56   1              bit keybuf1 = 1;  //按键值暂存，临时保存按键的扫描值
  57   1      
  58   1          bit keybuf2 = 1;  //按键值暂存，临时保存按键的扫描值
  59   1      
  60   1              bit keybuf3 = 1;  //按键值暂存，临时保存按键的扫描值
  61   1      
  62   1          bit keybuf4 = 1;  //按键值暂存，临时保存按键的扫描值
  63   1      
  64   1              unsigned int a=100;
  65   1      
  66   1          
  67   1      
  68   1          EA=1;
  69   1      
  70   1       
  71   1      
  72   1          while (1)
  73   1      
  74   1          {
  75   2      
  76   2                        
  77   2      
  78   2                      keybuf1 = KEY1;            //把当前扫描值暂存
  79   2      
  80   2              if (keybuf1 != backup1)     //当前值与前次值不相等说明此时按键有动作
  81   2      
  82   2              {
  83   3      
  84   3                  delay();              //延时大约10ms
  85   3      
  86   3                  if (keybuf1 == KEY1)   //判断扫描值有没有发生改变，即按键抖动
  87   3      
  88   3                  {
  89   4      
  90   4                     if (backup1 == 0)  //如果前次值为0，则说明当前是弹起动作
  91   4      
  92   4                        {
  93   5      
  94   5                          a = a-1000;      
  95   5      
  96   5                      }
  97   4      
  98   4                      backup1 = keybuf1;  //更新备份为当前值，以备进行下次比较
  99   4      
 100   4                  }
 101   3      
 102   3              }
 103   2      
 104   2                      keybuf2 = KEY2;            //把当前扫描值暂存
 105   2      
 106   2              if (keybuf2 != backup2)     //当前值与前次值不相等说明此时按键有动作
 107   2      
 108   2              {
 109   3      
 110   3                  delay();              //延时大约10ms
 111   3      
 112   3                  if (keybuf2 == KEY2)   //判断扫描值有没有发生改变，即按键抖动
 113   3      
 114   3                  {
 115   4      
 116   4                      if (backup2 == 0)  //如果前次值为0，则说明当前是弹起动作
 117   4      
C51 COMPILER V9.01   FANGBO                                                                01/01/2020 17:32:47 PAGE 3   

 118   4                      {
 119   5      
 120   5                          a = a+1000;      
 121   5      
 122   5                      }
 123   4      
 124   4                      backup2 = keybuf2;  //更新备份为当前值，以备进行下次比较
 125   4      
 126   4                  }
 127   3      
 128   3              }
 129   2      
 130   2                      keybuf3 = KEY3;            //把当前扫描值暂存
 131   2      
 132   2              if (keybuf3 != backup3)     //当前值与前次值不相等说明此时按键有动作
 133   2      
 134   2              {
 135   3      
 136   3                  delay();              //延时大约10ms
 137   3      
 138   3                  if (keybuf3 == KEY3)   //判断扫描值有没有发生改变，即按键抖动
 139   3      
 140   3                  {
 141   4      
 142   4                     if (backup3 == 0)  //如果前次值为0，则说明当前是弹起动作
 143   4      
 144   4                        {
 145   5      
 146   5                          a = a-100;      
 147   5      
 148   5                      }
 149   4      
 150   4                      backup3 = keybuf3;  //更新备份为当前值，以备进行下次比较
 151   4      
 152   4                  }
 153   3      
 154   3              }
 155   2                      keybuf4 = KEY4;            //把当前扫描值暂存
 156   2      
 157   2              if (keybuf4 != backup4)     //当前值与前次值不相等说明此时按键有动作
 158   2      
 159   2              {
 160   3      
 161   3                  delay();              //延时大约10ms
 162   3      
 163   3                  if (keybuf4 == KEY4)   //判断扫描值有没有发生改变，即按键抖动
 164   3      
 165   3                  {
 166   4      
 167   4                     if (backup4 == 0)  //如果前次值为0，则说明当前是弹起动作
 168   4      
 169   4                        {
 170   5      
 171   5                          a = a+100;      
 172   5      
 173   5                      }
 174   4      
 175   4                      backup4 = keybuf4;  //更新备份为当前值，以备进行下次比较
 176   4      
 177   4                  }
 178   3      
 179   3              }
C51 COMPILER V9.01   FANGBO                                                                01/01/2020 17:32:47 PAGE 4   

 180   2      
 181   2                               ConfigPWM(a, 50);   
 182   2      
 183   2                   for (i=0; i<40000; i++);
 184   2      
 185   2                       ClosePWM();
 186   2      
 187   2                                if ((a <= 50)||(a >= 150))
 188   2      
 189   2                    {             
 190   3      
 191   3                          LED1 = 0;
 192   3      
 193   3                                              LED2 = 0;
 194   3      
 195   3                                              LED3 = 0;
 196   3      
 197   3                                              LED4 = 0; 
 198   3      
 199   3                    }  
 200   2      
 201   2                            else 
 202   2      
 203   2                                {
 204   3      
 205   3                                          LED1 = 1;
 206   3      
 207   3                                              LED2 = 1;
 208   3      
 209   3                                              LED3 = 1;
 210   3      
 211   3                                              LED4 = 1; 
 212   3      
 213   3                                }     
 214   2      
 215   2          }
 216   1      
 217   1      }
 218          
 219          /* 配置并启动PWM，fr-频率，dc-占空比 */
 220          
 221          void ConfigPWM(unsigned int fr, unsigned char dc)
 222          
 223          {
 224   1      
 225   1          unsigned int  high, low;
 226   1      
 227   1          unsigned long tmp;
 228   1      
 229   1          
 230   1      
 231   1          tmp  = ((11059200/12) / fr) ;  //计算一个周期所需的计数值
 232   1      
 233   1          high = (tmp*dc) / 100;      //计算高电平所需的计数值
 234   1      
 235   1          low  = tmp - high;          //计算低电平所需的计数值
 236   1      
 237   1          high = 65536 - high + 12;   //计算高电平的重载值并补偿中断延时
 238   1      
 239   1          low  = 65536 - low  + 12;   //计算低电平的重载值并补偿中断延时
 240   1      
 241   1          HighRH = (unsigned char)(high>>8); //高电平重载值拆分为高低字节
C51 COMPILER V9.01   FANGBO                                                                01/01/2020 17:32:47 PAGE 5   

 242   1      
 243   1          HighRL = (unsigned char)high;
 244   1      
 245   1          LowRH  = (unsigned char)(low>>8);  //低电平重载值拆分为高低字节
 246   1      
 247   1          LowRL  = (unsigned char)low;
 248   1      
 249   1          TMOD &= 0xF0;   //清零T0的控制位
 250   1      
 251   1          TMOD |= 0x01;   //配置T0为模式1
 252   1      
 253   1          TH0 = HighRH;   //加载T0重载值
 254   1      
 255   1          TL0 = HighRL;
 256   1      
 257   1          ET0 = 1;        //使能T0中断
 258   1      
 259   1          TR0 = 1;        //启动T0
 260   1      
 261   1          PWMOUT = 1;     //输出高电平
 262   1      
 263   1      }
 264          
 265          /* 关闭PWM */
 266          
 267          void ClosePWM()
 268          
 269          {
 270   1      
 271   1          TR0 = 0;     //停止定时器
 272   1      
 273   1          ET0 = 0;     //禁止中断
 274   1      
 275   1          PWMOUT = 1;  //输出高电平
 276   1      
 277   1      }
 278          
 279          /* T0中断服务函数，产生PWM输出 */
 280          
 281          void InterruptTimer0() interrupt 1
 282          
 283          {
 284   1      
 285   1          if (PWMOUT == 1)  //当前输出为高电平时，装载低电平值并输出低电平
 286   1      
 287   1          {
 288   2      
 289   2              TH0 = LowRH;
 290   2      
 291   2              TL0 = LowRL;
 292   2      
 293   2              PWMOUT = 0;
 294   2      
 295   2          }
 296   1      
 297   1          else              //当前输出为低电平时，装载高电平值并输出高电平
 298   1      
 299   1          {
 300   2      
 301   2              TH0 = HighRH;
 302   2      
 303   2              TL0 = HighRL;
C51 COMPILER V9.01   FANGBO                                                                01/01/2020 17:32:47 PAGE 6   

 304   2      
 305   2              PWMOUT = 1;
 306   2      
 307   2          }
 308   1      
 309   1      }
 310          
 311          /* 软件延时函数，延时约10ms */
 312          
 313          void delay()
 314          
 315          {
 316   1      
 317   1          unsigned int j = 1000;
 318   1      
 319   1              
 320   1      
 321   1          while (j--);
 322   1      
 323   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    423    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       8
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
